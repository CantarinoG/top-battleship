(()=>{var n={185:(n,r,e)=>{"use strict";e.d(r,{Z:()=>u});var t=e(537),o=e.n(t),a=e(645),i=e.n(a),s=e(667),c=e.n(s),A=new URL(e(22),e.b),l=i()(o());l.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Lato&family=Spinnaker&display=swap);"]);var d=c()(A);l.push([n.id,":root {\r\n    --spinnaker: 'Spinnaker', sans-serif;\r\n    --lato: 'Lato', sans-serif;\r\n    --blue: #1B9AAA;\r\n}\r\n\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n#main-menu {\r\n    height: 100vh;\r\n    background-image: url("+d+");\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n}\r\n\r\n#main-menu h1 {\r\n    font-family: var(--spinnaker);\r\n    font-size: 11vw;\r\n}\r\n\r\n#main-menu form {\r\n    font-family: var(--lato);\r\n    font-size: large;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#main-menu form img {\r\n    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(182deg) brightness(104%) contrast(103%);\r\n    height: 21.6px;\r\n    aspect-ratio: 1/1;\r\n}\r\n\r\n#main-menu form input {\r\n    background-color: transparent;\r\n    border: none;\r\n    color: white;\r\n    font-family: var(--lato);\r\n    font-size: large;\r\n    text-align: center;\r\n}\r\n\r\n#main-menu form input::placeholder {\r\n    color: rgb(209, 209, 209);\r\n}\r\n\r\n#main-menu form input:focus {\r\n    outline: none;\r\n}\r\n\r\nbutton {\r\n    background-color: white;\r\n    border-radius: 4px;\r\n    border: 1px solid white;\r\n    font-family: var(--spinnaker);\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n}\r\n\r\nbutton:hover {\r\n    background-color: transparent;\r\n    color: white;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/mainMenu.css"],names:[],mappings:"AAEA;IACI,oCAAoC;IACpC,0BAA0B;IAC1B,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,yDAA2E;IAC3E,4BAA4B;IAC5B,sBAAsB;IACtB,2BAA2B;IAC3B,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,6BAA6B;AACjC;;AAEA;IACI,6BAA6B;IAC7B,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,gGAAgG;IAChG,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,YAAY;IACZ,wBAAwB;IACxB,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,uBAAuB;IACvB,6BAA6B;IAC7B,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;AAChB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Lato&family=Spinnaker&display=swap');\r\n\r\n:root {\r\n    --spinnaker: 'Spinnaker', sans-serif;\r\n    --lato: 'Lato', sans-serif;\r\n    --blue: #1B9AAA;\r\n}\r\n\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n#main-menu {\r\n    height: 100vh;\r\n    background-image: url('../assets/pexels-alessandro-vollborth-13342949.jpg');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n}\r\n\r\n#main-menu h1 {\r\n    font-family: var(--spinnaker);\r\n    font-size: 11vw;\r\n}\r\n\r\n#main-menu form {\r\n    font-family: var(--lato);\r\n    font-size: large;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#main-menu form img {\r\n    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(182deg) brightness(104%) contrast(103%);\r\n    height: 21.6px;\r\n    aspect-ratio: 1/1;\r\n}\r\n\r\n#main-menu form input {\r\n    background-color: transparent;\r\n    border: none;\r\n    color: white;\r\n    font-family: var(--lato);\r\n    font-size: large;\r\n    text-align: center;\r\n}\r\n\r\n#main-menu form input::placeholder {\r\n    color: rgb(209, 209, 209);\r\n}\r\n\r\n#main-menu form input:focus {\r\n    outline: none;\r\n}\r\n\r\nbutton {\r\n    background-color: white;\r\n    border-radius: 4px;\r\n    border: 1px solid white;\r\n    font-family: var(--spinnaker);\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n}\r\n\r\nbutton:hover {\r\n    background-color: transparent;\r\n    color: white;\r\n}\r\n"],sourceRoot:""}]);const u=l},67:(n,r,e)=>{"use strict";e.d(r,{Z:()=>u});var t=e(537),o=e.n(t),a=e(645),i=e.n(a),s=e(667),c=e.n(s),A=new URL(e(70),e.b),l=i()(o()),d=c()(A);l.push([n.id,"#match header {\r\n    height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    font-family: var(--spinnaker);\r\n    color: var(--blue);\r\n}\r\n\r\n#match main {\r\n    display: flex;\r\n}\r\n\r\n#player-container, #enemy-container {\r\n    width: 50vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    font-family: var(--spinnaker);\r\n    color: var(--blue);\r\n}\r\n\r\n#player-board, #enemy-board {\r\n    aspect-ratio: 1/1;\r\n    width: min(45vw, 75vh);\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    background-image: url("+d+");\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n}\r\n\r\n#player-board .row, #enemy-board .row {\r\n    display: flex;\r\n}\r\n\r\n#player-board .column, #enemy-board .column {\r\n    flex: 1;\r\n    aspect-ratio: 1/1;\r\n    height: calc(min(45vw, 75vh) / 10);\r\n    border: 0.1px solid white;\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n    #match main {\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 24px;\r\n    }\r\n    #player-board, #enemy-board {\r\n        width: 80vw;\r\n    }\r\n    #player-board .column, #enemy-board .column{\r\n        height: calc(80vw / 10);\r\n    }\r\n  }","",{version:3,sources:["webpack://./src/styles/match.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;;IAEtB,yDAA8D;IAC9D,4BAA4B;IAC5B,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,iBAAiB;IACjB,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA;IACI;QACI,sBAAsB;QACtB,mBAAmB;QACnB,SAAS;IACb;IACA;QACI,WAAW;IACf;IACA;QACI,uBAAuB;IAC3B;EACF",sourcesContent:["#match header {\r\n    height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    font-family: var(--spinnaker);\r\n    color: var(--blue);\r\n}\r\n\r\n#match main {\r\n    display: flex;\r\n}\r\n\r\n#player-container, #enemy-container {\r\n    width: 50vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    font-family: var(--spinnaker);\r\n    color: var(--blue);\r\n}\r\n\r\n#player-board, #enemy-board {\r\n    aspect-ratio: 1/1;\r\n    width: min(45vw, 75vh);\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    background-image: url('../assets/pexels-ekrulila-4035587.jpg');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n}\r\n\r\n#player-board .row, #enemy-board .row {\r\n    display: flex;\r\n}\r\n\r\n#player-board .column, #enemy-board .column {\r\n    flex: 1;\r\n    aspect-ratio: 1/1;\r\n    height: calc(min(45vw, 75vh) / 10);\r\n    border: 0.1px solid white;\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n    #match main {\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 24px;\r\n    }\r\n    #player-board, #enemy-board {\r\n        width: 80vw;\r\n    }\r\n    #player-board .column, #enemy-board .column{\r\n        height: calc(80vw / 10);\r\n    }\r\n  }"],sourceRoot:""}]);const u=l},315:(n,r,e)=>{"use strict";e.d(r,{Z:()=>u});var t=e(537),o=e.n(t),a=e(645),i=e.n(a),s=e(667),c=e.n(s),A=new URL(e(70),e.b),l=i()(o()),d=c()(A);l.push([n.id,"#preparation header {\r\n    height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    font-family: var(--spinnaker);\r\n    color: var(--blue);\r\n}\r\n\r\n#preparation main {\r\n    height: 80vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#board {\r\n    aspect-ratio: 1/1;\r\n    height: min(76vh, 98vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    background-image: url("+d+");\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n}\r\n\r\n#board .row {\r\n    display: flex;\r\n}\r\n\r\n#board .column {\r\n    flex: 1;\r\n    aspect-ratio: 1/1;\r\n    height: calc(min(76vh, 98vw) / 10);\r\n    border: 0.1px solid white;\r\n}\r\n\r\n#preparation button {\r\n    background-color: var(--blue);\r\n    border: 1px solid var(--blue);\r\n    color: white;\r\n    padding: 4px;\r\n}\r\n\r\n#preparation button:hover {\r\n    background-color: white;\r\n    color: var(--blue);\r\n}","",{version:3,sources:["webpack://./src/styles/preparation.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;IACnB,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;;IAEtB,yDAA8D;IAC9D,4BAA4B;IAC5B,sBAAsB;IACtB,2BAA2B;AAC/B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,iBAAiB;IACjB,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA;IACI,6BAA6B;IAC7B,6BAA6B;IAC7B,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;AACtB",sourcesContent:["#preparation header {\r\n    height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    font-family: var(--spinnaker);\r\n    color: var(--blue);\r\n}\r\n\r\n#preparation main {\r\n    height: 80vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#board {\r\n    aspect-ratio: 1/1;\r\n    height: min(76vh, 98vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    background-image: url('../assets/pexels-ekrulila-4035587.jpg');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n}\r\n\r\n#board .row {\r\n    display: flex;\r\n}\r\n\r\n#board .column {\r\n    flex: 1;\r\n    aspect-ratio: 1/1;\r\n    height: calc(min(76vh, 98vw) / 10);\r\n    border: 0.1px solid white;\r\n}\r\n\r\n#preparation button {\r\n    background-color: var(--blue);\r\n    border: 1px solid var(--blue);\r\n    color: white;\r\n    padding: 4px;\r\n}\r\n\r\n#preparation button:hover {\r\n    background-color: white;\r\n    color: var(--blue);\r\n}"],sourceRoot:""}]);const u=l},645:n=>{"use strict";n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},667:n=>{"use strict";n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[r].concat([a]).join("\n")}return[r].join("\n")}},379:n=>{"use strict";var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=t.base?c[0]+t.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=e(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)r[u].references++,r[u].updater(p);else{var m=o(p,t);t.byIndex=s,r.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);r[s].references--}for(var c=t(n,o),A=0;A<a.length;A++){var l=e(a[A]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=c}}},569:n=>{"use strict";var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{"use strict";n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{"use strict";n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{"use strict";n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},906:n=>{n.exports=function(n=null){return"string"==typeof n&&(n=n.trim()).length>0?n:"Admiral"}},138:n=>{n.exports=function(n,r,e,t,o){const a=[];if(o){for(let o=0;o<t;o+=1)e+o<10&&0===n[r][e+o]&&a.push([r,e+o]);return a.length===t&&a}for(let o=0;o<t;o+=1)r+o<10&&0===n[r+o][e]&&a.push([r+o,e]);return a.length===t&&a}},22:(n,r,e)=>{"use strict";n.exports=e.p+"3564663460be31eded0f.jpg"},70:(n,r,e)=>{"use strict";n.exports=e.p+"88d344ea254a92cd3d26.jpg"}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var t=r.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";var n=e(379),r=e.n(n),t=e(795),o=e.n(t),a=e(569),i=e.n(a),s=e(565),c=e.n(s),A=e(216),l=e.n(A),d=e(589),u=e.n(d),p=e(185),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),r()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const f=e.p+"5b4bbee2e91b8855115c.svg",h=e.p+"4a27dc22839293876f88.svg";var B=e(315),b={};b.styleTagTransform=u(),b.setAttributes=c(),b.insert=i().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=l(),r()(B.Z,b),B.Z&&B.Z.locals&&B.Z.locals;var y=e(67),g={};function v(n,r){let e=!1;for(;!e;){let t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());if(15!==r.hit&&2!==n[t][o])if(1===n[t][o]){if(n[t][o]=2,document.querySelector(`#player-board .column[data-coord="${t}${o}"]`).style.background="red",e=!0,r.hit+=1,15===r.hit)return void(document.getElementById("display").textContent="ENEMY WON!")}else n[t][o]=2,document.querySelector(`#player-board .column[data-coord="${t}${o}"]`).style.backgroundColor="#1B9AAA",e=!0}}function C(n="Admiral",r=null){document.querySelector("body").innerHTML=`\n    <div id="match">\n        <header>\n            <h1 id="display">MAKE YOUR MOVE...</h1>\n        </header>\n        <main>\n            <div id="player-container">\n                <h2>${n.toUpperCase()}</h2>\n                <div id="player-board"></div>\n            </div>\n            <div id="enemy-container">\n                <h2>ENEMY</h2>\n                <div id="enemy-board"></div>\n            </div>\n        </main>\n    </div>\n    `;const e=document.getElementById("player-board"),t=document.getElementById("enemy-board");w(e),w(t),function(n){for(let r=0;r<10;r+=1)for(let e=0;e<10;e+=1)1===n[r][e]&&(document.querySelector(`#player-board .column[data-coord="${r}${e}"]`).style.background="#efefef")}(r),function(n){const r=function(){const n=new x;return n.randomValidBoardArray(),n.boardArray}();let e=0,t={hit:0};for(let o=0;o<10;o+=1)for(let a=0;a<10;a+=1){const i=document.querySelector(`#enemy-board .column[data-coord="${o}${a}"]`);i.onclick=()=>{if(15!==e&&2!==r[o][a])if(1===r[o][a]){if(r[o][a]=2,i.style.backgroundColor="red",e+=1,15===e)return void(document.getElementById("display").textContent="YOU WON!");v(n,t)}else r[o][a]=2,i.style.backgroundColor="#1B9AAA",v(n,t)}}}(r)}g.styleTagTransform=u(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=l(),r()(y.Z,g),y.Z&&y.Z.locals&&y.Z.locals;const I=e(138);class x{constructor(n=5,r=!0){this.tiles=n,this.isHorizontal=r,this.boardArray=[],this.initializeBoardArray()}initializeBoardArray(){for(let n=0;n<10;n+=1){let n=[];for(let r=0;r<10;r+=1)n.push(0);this.boardArray.push(n)}}randomValidBoardArray(){for(;this.tiles;){const n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),e=Math.floor(2*Math.random()),t=I(this.boardArray,n,r,this.tiles,e);if(t){for(let n=0;n<t.length;n++){const r=t[n][0],e=t[n][1];this.boardArray[r][e]=1}this.tiles-=1}}}}const k=new x;function w(n){let r="";for(let n=0;n<10;n+=1){r+="<div class='row'>";for(let e=0;e<10;e+=1)r+=`<div class='column' data-coord='${n}${e}'></div>`;r+="</div>"}n.innerHTML=r}const E=e(906);let S;var j,M;document.querySelector("body").innerHTML=`\n    <main id="main-menu">\n        <h1>BATTLESHIP</h1>\n        <form id="main-menu-form">\n            <label for="main-menu-input">Enter your name, admiral:</label>\n            <div class="name-input">\n                <img src="${f}" alt="Write Icon" />\n                <input type="text" placeholder="John Doe..." id="main-menu-input">\n            </div>\n            <button type="submit" id="main-menu-submit">START</button>\n        </form>\n    </main>\n    `,j=document.getElementById("main-menu-form"),M=document.getElementById("main-menu-input"),j.addEventListener("submit",(n=>{n.preventDefault();const r=E(M.value);S=r,document.querySelector("body").innerHTML='\n    <div id="preparation">\n        <header>\n            <h1>PLACE YOUR FLEET...</h1>\n            <button id="direction-button">HORIZONTAL</button>\n        </header>\n        <main>\n            <div id="board">\n            </div>\n        </main>\n    </div>\n    ',w(document.getElementById("board")),function(){const n=document.getElementById("direction-button");n.onclick=()=>{k.isHorizontal?(k.isHorizontal=!1,n.textContent="VERTICAL"):(k.isHorizontal=!0,n.textContent="HORIZONTAL")}}(),function(){for(let n=0;n<10;n+=1)for(let r=0;r<10;r+=1){const e=document.querySelector(`.column[data-coord="${n}${r}"]`);e.onclick=()=>{const e=I(k.boardArray,n,r,k.tiles,k.isHorizontal);if(e){for(let n=0;n<e.length;n++){const r=e[n][0],t=e[n][1];k.boardArray[r][t]=1,document.querySelector(`.column[data-coord="${r}${t}"]`).style.background="#efefef"}k.tiles-=1,0===k.tiles&&(console.log("end"),C(S,k.boardArray))}},e.onmouseenter=()=>{const e=I(k.boardArray,n,r,k.tiles,k.isHorizontal);if(e)for(let n=0;n<e.length;n++){const r=e[n][0],t=e[n][1];document.querySelector(`.column[data-coord="${r}${t}"]`).style.background="#1B9AAA"}},e.onmouseleave=()=>{const e=I(k.boardArray,n,r,k.tiles,k.isHorizontal);if(e)for(let n=0;n<e.length;n++){const r=e[n][0],t=e[n][1];document.querySelector(`.column[data-coord="${r}${t}"]`).style.background="transparent"}}}}()})),function(){const n=document.querySelector("head"),r=document.createElement("link");r.setAttribute("rel","shortcut icon"),r.setAttribute("href",h),n.appendChild(r)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,